/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export module ApiClient {

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Get conversion
     * @param from unit of measure from
     * @param to unit of measure to
     * @param language (optional) 
     * @param api_version The requested API version
     * @return Success
     */
    conversions(ingredientId: string, from: string, to: string, quantity: number): Promise<ConversionDTOErrorDTOResponseDTO> {
        let url_ = this.baseUrl + "convert/";
        if (ingredientId === undefined || ingredientId === null)
            throw new Error("The parameter 'ingredientId' must be defined and cannot be null.");
        else
            url_ += encodeURIComponent("" + ingredientId) + "/"; 
        if (from === undefined || from === null)
            throw new Error("The parameter 'from' must be defined and cannot be null.");
        else
            url_ += encodeURIComponent("" + from) + "/"; 
        if (quantity === undefined || quantity === null)
            throw new Error("The parameter 'quantity' must be defined and cannot be null.");
        else
            url_ += encodeURIComponent("" + quantity) + "/"; 
        if (to === undefined || to === null)
            throw new Error("The parameter 'to' must be defined and cannot be null.");
        else
            url_ += encodeURIComponent("" + to); 
        
        
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConversions(_response);
        });
    }

    protected processConversions(response: Response): Promise<ConversionDTOErrorDTOResponseDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            console.log(resultData200);
            result200 = ConversionDTOErrorDTOResponseDTO.fromJS(resultData200);
            
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ConversionDTOErrorDTOResponseDTO>(<any>null);
    }

    /**
     * Get ingredients
     * @param language (optional) 
     * @param api_version The requested API version
     * @return Success
     */
    ingredients(): Promise<IngredientDTOListErrorDTOResponseDTO> {
        let url_ = this.baseUrl + "/ingredients";

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIngredients(_response);
        });
    }

    protected processIngredients(response: Response): Promise<IngredientDTOListErrorDTOResponseDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IngredientDTOListErrorDTOResponseDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IngredientDTOListErrorDTOResponseDTO>(<any>null);
    }

    /**
     * Get ingredients by id
     * @param language (optional) 
     * @param api_version The requested API version
     * @return Success
     */
    ingredients2(id: string, language: string | undefined, api_version: string): Promise<IngredientDTOErrorDTOResponseDTO> {
        let url_ = this.baseUrl + "/api/Ingredients/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (language === null)
            throw new Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&"; 
        if (api_version === undefined || api_version === null)
            throw new Error("The parameter 'api_version' must be defined and cannot be null.");
        else
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIngredients2(_response);
        });
    }

    protected processIngredients2(response: Response): Promise<IngredientDTOErrorDTOResponseDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IngredientDTOErrorDTOResponseDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IngredientDTOErrorDTOResponseDTO>(<any>null);
    }

    /**
     * Get languages
     * @param api_version The requested API version
     * @return Success
     */
    languages(api_version: string): Promise<LanguageDTOListErrorDTOResponseDTO> {
        let url_ = this.baseUrl + "/api/Languages?";
        if (api_version === undefined || api_version === null)
            throw new Error("The parameter 'api_version' must be defined and cannot be null.");
        else
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLanguages(_response);
        });
    }

    protected processLanguages(response: Response): Promise<LanguageDTOListErrorDTOResponseDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LanguageDTOListErrorDTOResponseDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LanguageDTOListErrorDTOResponseDTO>(<any>null);
    }

    /**
     * Get language by id
     * @param api_version The requested API version
     * @return Success
     */
    languages2(id: string, api_version: string): Promise<LanguageDTOErrorDTOResponseDTO> {
        let url_ = this.baseUrl + "/api/Languages/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (api_version === undefined || api_version === null)
            throw new Error("The parameter 'api_version' must be defined and cannot be null.");
        else
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLanguages2(_response);
        });
    }

    protected processLanguages2(response: Response): Promise<LanguageDTOErrorDTOResponseDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LanguageDTOErrorDTOResponseDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LanguageDTOErrorDTOResponseDTO>(<any>null);
    }
}

export class IngredientDTO implements IIngredientDTO {
    id?: number | undefined;
    name?: string | undefined;

    constructor(data?: IIngredientDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): IngredientDTO {
        data = typeof data === 'object' ? data : {};
        let result = new IngredientDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IIngredientDTO {
    id?: number| undefined;
    name?: string | undefined;
}

export class ConversionDTO implements IConversionDTO {
    ingredient?: IngredientDTO;
    fromValue?: number;
    fromMU?: string | undefined;
    toMU?: string | undefined;
    result?: number;

    constructor(data?: IConversionDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ingredient = _data["ingredient"] ? IngredientDTO.fromJS(_data["ingredient"]) : <any>undefined;
            this.fromValue = _data["fromValue"];
            this.fromMU = _data["fromMU"];
            this.toMU = _data["toMU"];
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): ConversionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ConversionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ingredient"] = this.ingredient ? this.ingredient.toJSON() : <any>undefined;
        data["fromValue"] = this.fromValue;
        data["fromMU"] = this.fromMU;
        data["toMU"] = this.toMU;
        data["result"] = this.result;
        return data; 
    }
}

export interface IConversionDTO {
    ingredient?: IngredientDTO;
    fromValue?: number;
    fromMU?: string | undefined;
    toMU?: string | undefined;
    result?: number;
}

export class ErrorDTO implements IErrorDTO {
    errorMessages?: string[] | undefined;

    constructor(data?: IErrorDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages!.push(item);
            }
        }
    }

    static fromJS(data: any): ErrorDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data; 
    }
}

export interface IErrorDTO {
    errorMessages?: string[] | undefined;
}

export class ConversionDTOErrorDTOResponseDTO implements IConversionDTOErrorDTOResponseDTO {
    data?: ConversionDTO;
    errors?: ErrorDTO;

    constructor(data?: IConversionDTOErrorDTOResponseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data ? ConversionDTO.fromJS(_data) : <any>undefined;
            this.errors = _data["errors"] ? ErrorDTO.fromJS(_data["errors"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ConversionDTOErrorDTOResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ConversionDTOErrorDTOResponseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["errors"] = this.errors ? this.errors.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IConversionDTOErrorDTOResponseDTO {
    data?: ConversionDTO;
    errors?: ErrorDTO;
}

export class IngredientDTOListErrorDTOResponseDTO implements IIngredientDTOListErrorDTOResponseDTO {
    data?: IngredientDTO[] | undefined;
    errors?: ErrorDTO;

    constructor(data?: IIngredientDTOListErrorDTOResponseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            console.log(_data)
            if (Array.isArray(_data)) {
                this.data = [] as any;
                for (let item of _data)
                    this.data!.push(IngredientDTO.fromJS(item));
            }
            this.errors = _data["errors"] ? ErrorDTO.fromJS(_data["errors"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IngredientDTOListErrorDTOResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new IngredientDTOListErrorDTOResponseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["errors"] = this.errors ? this.errors.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIngredientDTOListErrorDTOResponseDTO {
    data?: IngredientDTO[] | undefined;
    errors?: ErrorDTO;
}

export class IngredientDTOErrorDTOResponseDTO implements IIngredientDTOErrorDTOResponseDTO {
    data?: IngredientDTO;
    errors?: ErrorDTO;

    constructor(data?: IIngredientDTOErrorDTOResponseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? IngredientDTO.fromJS(_data["data"]) : <any>undefined;
            this.errors = _data["errors"] ? ErrorDTO.fromJS(_data["errors"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IngredientDTOErrorDTOResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new IngredientDTOErrorDTOResponseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["errors"] = this.errors ? this.errors.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIngredientDTOErrorDTOResponseDTO {
    data?: IngredientDTO;
    errors?: ErrorDTO;
}

export class LanguageDTO implements ILanguageDTO {
    id?: string | undefined;
    isoCode?: string | undefined;
    name?: string | undefined;

    constructor(data?: ILanguageDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isoCode = _data["isoCode"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): LanguageDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isoCode"] = this.isoCode;
        data["name"] = this.name;
        return data; 
    }
}

export interface ILanguageDTO {
    id?: string | undefined;
    isoCode?: string | undefined;
    name?: string | undefined;
}

export class LanguageDTOListErrorDTOResponseDTO implements ILanguageDTOListErrorDTOResponseDTO {
    data?: LanguageDTO[] | undefined;
    errors?: ErrorDTO;

    constructor(data?: ILanguageDTOListErrorDTOResponseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(LanguageDTO.fromJS(item));
            }
            this.errors = _data["errors"] ? ErrorDTO.fromJS(_data["errors"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LanguageDTOListErrorDTOResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageDTOListErrorDTOResponseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["errors"] = this.errors ? this.errors.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ILanguageDTOListErrorDTOResponseDTO {
    data?: LanguageDTO[] | undefined;
    errors?: ErrorDTO;
}

export class LanguageDTOErrorDTOResponseDTO implements ILanguageDTOErrorDTOResponseDTO {
    data?: LanguageDTO;
    errors?: ErrorDTO;

    constructor(data?: ILanguageDTOErrorDTOResponseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? LanguageDTO.fromJS(_data["data"]) : <any>undefined;
            this.errors = _data["errors"] ? ErrorDTO.fromJS(_data["errors"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LanguageDTOErrorDTOResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageDTOErrorDTOResponseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["errors"] = this.errors ? this.errors.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ILanguageDTOErrorDTOResponseDTO {
    data?: LanguageDTO;
    errors?: ErrorDTO;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

}