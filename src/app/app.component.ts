import { Component, OnInit, AfterViewInit } from '@angular/core';
import { FormGroup, FormBuilder, FormControl } from '@angular/forms';
import { of } from 'rxjs';
import { DataService } from './data.service';
import { sendRequest } from 'selenium-webdriver/http';
import { Ingredient, Data, Response, Conversion } from './models/ingredients.response';
import { ApiClient } from 'src/autogenerated/client';
import { TranslateService } from '@ngx-translate/core';
import { round } from 'mathjs'

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  param = { value: "", text: "" };
  selected_ingredient = 0;
  selected_in_unit = "";
  selected_in_unit_name = "";
  selected_out_unit = "";


  ngOnInit(): void {

    this.htmlVariable = ""
    this.hiddenVar = true;
    // this.contactForm.controls.inputUnit;
    this.units = this.getUnits();
    this.dataService.GetIngredients().then((data: ApiClient.IIngredientDTOListErrorDTOResponseDTO) => {
      console.log(data.data);
      this.ingredients = data.data
      this.selected_ingredient = this.ingredients[0].id;
      this.selected_in_unit = this.units[0].id;
      console.log(this.selected_in_unit)
      this.selected_out_unit = this.units[1].id;
      this.createContactForm();

      // this.contactForm.controls.ingredientSelection;
    });

  }

  units = [];
  ingredients: ApiClient.IngredientDTO[];
  contactForm: FormGroup;
  // conversion: Conversion;
  htmlVariable: any;
  hiddenVar: boolean;

  public unitText = "";
  constructor(private formBuilder: FormBuilder, private dataService: DataService, private translate: TranslateService) {
    this.createContactForm();
    console.log(this.translate.getBrowserLang());
    console.log(this.translate.getBrowserCultureLang());
    // this language will be used as a fallback when a translation isn't found in the current language
    translate.setDefaultLang('gr');

    // the lang to use, if the lang isn't available, it will use the current loader to get them
    translate.use('gr');
  }

  createContactForm() {
    console.log(this.selected_in_unit);
    this.contactForm = this.formBuilder.group({
      // name: new FormControl(1),
      inputUnitValue: [''],
      ingredientSelection: [this.selected_ingredient],
      inputUnit: [this.selected_in_unit],
      outputUnit: [this.selected_out_unit],

    });


  }

  getUnits() {
    return [
      { id: 'grams', name: 'UNIT.GRAMS' },
      { id: 'oz', name: 'UNIT.OZ' },
      { id: 'cup', name: 'UNIT.CUPS' },
      { id: 'tablespoon', name: 'UNIT.TABLESPOONS' }
    ];
  }

  onSubmit() {
    this.hiddenVar = false;
    var inputUnitValue = this.contactForm.value.inputUnitValue;
    var ingredientSelection = this.contactForm.value.ingredientSelection;
    var inputUnit = this.contactForm.value.inputUnit;
    var outputUnit = this.contactForm.value.outputUnit;

    console.log('Your form data : ', this.contactForm.value, this.hiddenVar);

    this.dataService.Convert(ingredientSelection, inputUnit, outputUnit, inputUnitValue).then((response: ApiClient.ConversionDTOErrorDTOResponseDTO) => {

      // this.htmlVariable = response.data.result + " " + (v => v.id == this.contactForm.get('name').value)[0].name;
      this.unitText = this.units.filter(v => v.id == outputUnit)[0].name;
      console.log(this.unitText);
      console.log(response)
      var txt = round(response.data.result, 2);
      // Get translation for unit text
      this.translate.get(this.unitText).subscribe((res: string) => {
        console.log(res);
        this.htmlVariable = txt + " " + res;
      });
    });
  }
}
